// Package LifeService comment
// This file was generated by tars2go 1.1.4
// Generated from DataService.tars
package LifeService

import (
	"fmt"

	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

// UserInfo struct implement
type UserInfo struct {
	Name              string `json:"name"`
	Phone             string `json:"phone"`
	Gender            string `json:"gender"`
	Avatar_url        string `json:"avatar_url"`
	Registration_time string `json:"registration_time"`
	Group             int32  `json:"group"`
}

func (st *UserInfo) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *UserInfo) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.Name, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Phone, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Gender, 2, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Avatar_url, 3, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Registration_time, 4, true)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Group, 5, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *UserInfo) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require UserInfo, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *UserInfo) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.Name, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Phone, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Gender, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Avatar_url, 3)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Registration_time, 4)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Group, 5)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *UserInfo) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// Column struct implement
type Column struct {
	ColumnName  string `json:"columnName"`
	DBInt       bool   `json:"DBInt"`
	ColumnValue string `json:"columnValue"`
}

func (st *Column) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *Column) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.ColumnName, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_bool(&st.DBInt, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.ColumnValue, 2, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *Column) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require Column, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *Column) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.ColumnName, 0)
	if err != nil {
		return err
	}

	err = _os.Write_bool(st.DBInt, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.ColumnValue, 2)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *Column) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// ClubInfo struct implement
type ClubInfo struct {
	Club_id      string `json:"club_id"`
	Name         string `json:"name"`
	Chairman     string `json:"chairman"`
	Create_time  string `json:"create_time"`
	Introduction string `json:"introduction"`
}

func (st *ClubInfo) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *ClubInfo) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.Club_id, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Name, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Chairman, 2, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Create_time, 3, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Introduction, 4, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *ClubInfo) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require ClubInfo, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *ClubInfo) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.Club_id, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Name, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Chairman, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Create_time, 3)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Introduction, 4)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *ClubInfo) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// ApplyInfo struct implement
type ApplyInfo struct {
	Apply_id   string `json:"apply_id"`
	Apply_time string `json:"apply_time"`
	Wx_id      string `json:"wx_id"`
	Club_id    string `json:"club_id"`
	User_name  string `json:"user_name"`
	Club_name  string `json:"club_name"`
	Avatar_url string `json:"avatar_url"`
}

func (st *ApplyInfo) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *ApplyInfo) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.Apply_id, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Apply_time, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Wx_id, 2, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Club_id, 3, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.User_name, 4, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Club_name, 5, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Avatar_url, 6, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *ApplyInfo) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require ApplyInfo, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *ApplyInfo) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.Apply_id, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Apply_time, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Wx_id, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Club_id, 3)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.User_name, 4)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Club_name, 5)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Avatar_url, 6)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *ApplyInfo) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// ActivityInfo struct implement
type ActivityInfo struct {
	Activity_id         string `json:"activity_id"`
	Name                string `json:"name"`
	Sponsor             string `json:"sponsor"`
	Club_id             string `json:"club_id"`
	Target_id           string `json:"target_id"`
	Create_time         string `json:"create_time"`
	Start_time          string `json:"start_time"`
	Stop_time           string `json:"stop_time"`
	Registry_start_time string `json:"registry_start_time"`
	Registry_stop_time  string `json:"registry_stop_time"`
	Content             string `json:"content"`
}

func (st *ActivityInfo) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *ActivityInfo) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.Activity_id, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Name, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Sponsor, 2, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Club_id, 3, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Target_id, 4, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Create_time, 5, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Start_time, 6, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Stop_time, 7, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Registry_start_time, 8, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Registry_stop_time, 9, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Content, 10, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *ActivityInfo) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require ActivityInfo, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *ActivityInfo) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.Activity_id, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Name, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Sponsor, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Club_id, 3)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Target_id, 4)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Create_time, 5)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Start_time, 6)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Stop_time, 7)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Registry_start_time, 8)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Registry_stop_time, 9)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Content, 10)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *ActivityInfo) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// ActivityRecord struct implement
type ActivityRecord struct {
	Wx_id       string `json:"wx_id"`
	User_name   string `json:"user_name"`
	Record_time string `json:"record_time"`
}

func (st *ActivityRecord) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *ActivityRecord) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.Wx_id, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.User_name, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Record_time, 2, true)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *ActivityRecord) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require ActivityRecord, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *ActivityRecord) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.Wx_id, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.User_name, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Record_time, 2)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *ActivityRecord) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// Message struct implement
type Message struct {
	Message_id   string `json:"message_id"`
	User_id      string `json:"user_id"`
	Receiver     string `json:"receiver"`
	Content      string `json:"content"`
	Anonymous    bool   `json:"anonymous"`
	Message_time string `json:"message_time"`
	Like_count   int32  `json:"like_count"`
	User_name    string `json:"user_name"`
}

func (st *Message) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *Message) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.Message_id, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.User_id, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Receiver, 2, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Content, 3, true)
	if err != nil {
		return err
	}

	err = _is.Read_bool(&st.Anonymous, 4, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Message_time, 5, true)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Like_count, 6, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.User_name, 7, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *Message) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require Message, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *Message) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_string(st.Message_id, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.User_id, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Receiver, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Content, 3)
	if err != nil {
		return err
	}

	err = _os.Write_bool(st.Anonymous, 4)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Message_time, 5)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Like_count, 6)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.User_name, 7)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *Message) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
